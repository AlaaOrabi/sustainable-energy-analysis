# -*- coding: utf-8 -*-
"""CO2_Emissions_ Prediction_Renewable_Energy_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UvorZpG6U6yWhBcWK4Blcx97m4qEoY4L
"""

# -*- coding: utf-8 -*-
"""Enhanced Exploratory Data Analysis"""

# Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from plotly.subplots import make_subplots
import warnings

# Configurations
warnings.filterwarnings('ignore')
pd.options.display.float_format = '{:.2f}'.format

# Load the dataset
data = pd.read_csv('global-data-on-sustainable-energy.csv')

# Overview of the dataset
print("Dataset Summary:")
display(data.describe().transpose())

# Focusing on data for 2020
df_2020 = data[data['Year'] == 2020]

# Choropleth for Electricity Access in 2020
fig = px.choropleth(
    df_2020,
    locations="Entity",
    locationmode='country names',
    color="Access to electricity (% of population)",
    hover_name="Entity",
    color_continuous_scale=px.colors.sequential.Plasma,
    title="Electricity Access by Country (2020)"
)
fig.show()

# Aggregating data by energy source
df_aggregated = data.groupby('Entity').agg({
    'Electricity from fossil fuels (TWh)': 'sum',
    'Electricity from nuclear (TWh)': 'sum',
    'Electricity from renewables (TWh)': 'sum'
}).reset_index()

# Pie Chart for Electricity Sources by Country
df_melted = df_aggregated.melt(id_vars='Entity', var_name='Source', value_name='Electricity (TWh)')
fig = px.pie(df_melted, names='Source', values='Electricity (TWh)', title='Electricity Sources by Country')
fig.update_layout(width=800, height=600)
fig.show()

# Global Trend of Electricity Access (2000-2020)
df_global_electricity = data.groupby('Year')['Access to electricity (% of population)'].mean().reset_index()
fig = px.line(df_global_electricity, x='Year', y='Access to electricity (% of population)',
              title='Global Electricity Access Trend (2000-2020)')
fig.update_layout(width=1200, height=600)
fig.show()

# Global Trend of CO₂ Emissions (2000-2020)
df_global_co2_emission = data.groupby('Year')['Value_co2_emissions_kt_by_country'].mean().reset_index()
fig = px.line(df_global_co2_emission, x='Year', y='Value_co2_emissions_kt_by_country',
              title='Global CO₂ Emissions Trend (2000-2020)')
fig.update_layout(width=1200, height=600)
fig.show()

# Top 10 countries by fossil fuel electricity consumption (2000-2020)
top_10_fossil_fuel = data.groupby('Entity')['Electricity from fossil fuels (TWh)'].sum().nlargest(10).reset_index()
fig = px.bar(top_10_fossil_fuel, x='Entity', y='Electricity from fossil fuels (TWh)',
             title='Top 10 Countries by Fossil Fuel Electricity Consumption')
fig.update_layout(width=1200, height=600)
fig.show()

# CO₂ Emission Trends for Top 10 Fossil Fuel Consumers
def co2_emission_plot(country):
    co2_trend = data[data['Entity'] == country]
    fig = px.line(co2_trend, x='Year', y='Value_co2_emissions_kt_by_country', title=f'CO₂ Emissions for {country}')
    return fig

# Subplot for CO₂ emission trends
fig = make_subplots(rows=5, cols=2, subplot_titles=top_10_fossil_fuel['Entity'])
for i, country in enumerate(top_10_fossil_fuel['Entity']):
    row, col = divmod(i, 2)
    co2_plot = co2_emission_plot(country)
    for trace in co2_plot['data']:
        fig.add_trace(trace, row=row+1, col=col+1)

fig.update_layout(height=1800, width=1200, title_text="CO₂ Emissions Trend for Top 10 Fossil Fuel Consumers")
fig.show()

# Top 5 and Bottom 5 countries by CO₂ emissions
top_5_co2 = data.groupby('Entity')['Value_co2_emissions_kt_by_country'].mean().nlargest(5)
bottom_5_co2 = data.groupby('Entity')['Value_co2_emissions_kt_by_country'].mean().nsmallest(5)

# Plotting
fig, axs = plt.subplots(1, 2, figsize=(14, 6))
sns.barplot(x=top_5_co2.index, y=top_5_co2.values, ax=axs[0], palette="Reds")
axs[0].set_title("Top 5 Countries by Average CO₂ Emissions")
sns.barplot(x=bottom_5_co2.values, y=bottom_5_co2.index, ax=axs[1], palette="Blues")
axs[1].set_title("Bottom 5 Countries by Average CO₂ Emissions")
plt.tight_layout()
plt.show()

# Correlation Analysis
heatmap_cols = [
    'Renewable energy share in the total final energy consumption (%)',
    'Electricity from fossil fuels (TWh)', 'Electricity from nuclear (TWh)',
    'Electricity from renewables (TWh)', 'Low-carbon electricity (% electricity)',
    'Primary energy consumption per capita (kWh/person)', 'Value_co2_emissions_kt_by_country'
]

correlation_matrix = data[heatmap_cols].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix of Energy Indicators')
plt.show()

# Scatter plot for CO₂ emissions and fossil fuel electricity
correlation = data['Value_co2_emissions_kt_by_country'].corr(data['Electricity from fossil fuels (TWh)'])
plt.scatter(data['Electricity from fossil fuels (TWh)'], data['Value_co2_emissions_kt_by_country'])
plt.xlabel('Electricity from Fossil Fuels (TWh)')
plt.ylabel('CO₂ Emissions (kt)')
plt.title(f'CO₂ Emissions vs. Fossil Fuel Electricity\nCorrelation: {correlation:.2f}')
plt.show()

# Outlier Detection
def detect_outliers(column):
    Q1, Q3 = np.percentile(column.dropna(), [25, 75])
    IQR = Q3 - Q1
    outliers = column[(column < Q1 - 1.5 * IQR) | (column > Q3 + 1.5 * IQR)]
    return outliers.size, outliers.size / len(column) * 100

outliers_info = {
    col: detect_outliers(data[col]) for col in data.select_dtypes(include="number").columns
}
outliers_df = pd.DataFrame(outliers_info, index=['Num outliers', 'Percent outliers']).transpose()
print("Outliers Summary:")
display(outliers_df.sort_values(by='Percent outliers', ascending=False))

# Data Quality Report Function
def data_quality_report(df, categorical_features, continuous_features):
    report = {}
    # Continuous Features
    for col in continuous_features:
        report[col] = {
            "Count": df[col].count(),
            "Miss %": df[col].isna().mean() * 100,
            "Cardinality": df[col].nunique(),
            "Mean": df[col].mean(),
            "Std Dev": df[col].std(),
            "Min": df[col].min(),
            "Max": df[col].max()
        }
    # Categorical Features
    for col in categorical_features:
        report[col] = {
            "Count": df[col].count(),
            "Miss %": df[col].isna().mean() * 100,
            "Cardinality": df[col].nunique(),
            "Mode": df[col].mode()[0]
        }
    return pd.DataFrame(report).transpose()

# Define and display the quality report
categorical_features = data.select_dtypes(exclude="number").columns
continuous_features = data.select_dtypes(include="number").columns
quality_report = data_quality_report(data, categorical_features, continuous_features)
display(quality_report)